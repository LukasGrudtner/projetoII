administer
configuration
relay
router
communication
command
is
used
to
configure
relay
router
communication
Relay
router
communication
support
is
enabled
by
setting
value
variable
stores
address
within
tun
module
This
variable
is
al
to
all
tunnels
defines
policy
communication
with
relay
routers
By
default
address
is
set
to
kernel
interprets
value
to
indicate
support
relay
router
communication
is
abled
support
is
enabled
specified
address
is
used
as
destination
address
when
packets
destined
native
hosts
are
sent
through
tunnel
command
uses
project
private
ioctl
to
set
used
without
any
options
outputs
current
configuration
status
Use
option
to
send
packets
to
specific
relay
unicast
address
instead
default
anycast
address
address
specified
with
option
does
not
specify
policy
receiving
traffic
from
relay
routers
source
relay
router
ceived
packet
is
different
relay
router
may
be
chosen
each
sending
native
point
Configuration
changes
made
by
using
are
not
persistent
across
reboot
changes
will
persist
kernel
only
until
take
tunnel
down
command
supports
following
addr
Use
specified
address
addrý
Enable
support
relay
router
Use
addr
is
use
default
anycast
address
Disable
support
relay
router
Help
following
operands
are
addr
specific
relay
unicast
address
addr
must
be
specified
as
dotted
decimal
representation
address
error
will
occur
command
will
failý
Example
Printing
Configuration
Status
Use
without
any
options
to
print
configuration
status
If
relay
router
communication
is
administrator
will
see
following
Relay
Router
communication
support
is
If
router
communication
is
enabled
user
will
see
Relay
Router
communication
support
is
enabled
destination
address
Relay
Router
following
exit
values
are
Successful
error
default
installation
root
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Wcsu
Interface
StabilityEvolving
Huitema
RFC
Anycast
Prefix
Relay
Routers
Network
Working
Group
Juneý
Moore
RFC
Connection
Domains
via
Clouds
Network
Working
Group
reports
following
input
is
not
valid
unicast
address
following
example
provides
incorrect
unicast
address
address
specified
with
option
must
be
valid
unicast
address
option
requires
argument
following
example
does
not
include
argument
option
option
requires
following
example
specifies
options
are
not
options
specified
are
not
usage
message
is
output
to
screen
following
example
specifies
option
without
specifying
option
option
is
required
conjunction
with
option
usage
message
is
output
to
screen
ioctl
Invalid
argument
following
example
specifies
invalid
address
address
specified
with
option
must
not
be
class
addrý
addrý
convert
between
long
integer
ASCII
string
long
char
char
These
functions
maintain
numbers
stored
ASCII
characters
define
notation
by
long
integers
can
be
represented
by
up
to
six
Each
character
represents
characters
used
to
represent
are
as
CharacterDigit
function
takes
pointer
to
representation
returns
corresponding
long
If
string
pointed
to
by
contains
more
than
six
uses
first
function
scans
character
string
from
left
to
right
with
least
significant
digit
leftý
decoding
each
character
as
number
function
takes
long
argument
returns
pointer
to
corresponding
representation
If
argument
is
returns
pointer
to
null
string
value
returned
by
is
pointer
into
static
buffer
contents
are
overwritten
by
each
callý
In
case
multithreaded
applications
return
value
is
pointer
to
thread
specific
dataý
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Interface
tyStandard
aac
SCSI
HBA
driver
Adaptec
AdvancedRAID
Controller
aac
plain
SCSI
host
bus
adapter
driver
is
nexus
driver
supports
Adaptec
SCSI
RAID
cardý
Dell
PERC
SCSI
RAID
Dell
PERC
SCSI
RAID
Adaptec
SATA
RAID
cardý
Adaptec
SAS
RAID
cards
STK
RAID
STK
RAID
STK
RAID
EXT
RAID
cards
aac
driver
is
ported
from
FreeBSD
supports
RAID
disk
functions
RAID
management
There
are
no
user
configurable
parameters
Please
configure
hardware
through
BIOSý
See
description
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
AvailabilityT{
SPARC
to
systems
with
AAC
hardware
RAID
T}
ELF
kernel
module
ELF
kernel
module
ELF
kernel
module
Configuration
fileý
no
Small
Computer
System
abort
terminate
process
abnormally
void
function
causes
abnormal
process
termination
to
occur
unless
signal
SIGABRT
is
being
caught
signal
handler
does
not
return
abnormal
termination
processing
includes
least
effect
all
open
streams
message
catalogue
descriptors
default
actions
defined
SIGABRT
SIGABRT
signal
is
sent
to
calling
process
as
by
means
function
with
argument
SIGABRT
status
made
available
to
by
abort
will
be
process
terminated
by
BRT
signal
abort
will
override
blocking
ignoring
SIGABRT
signal
function
does
not
return
No
errors
are
defined
Catching
signal
is
intended
to
provide
application
writer
with
portable
means
to
abort
free
from
possible
interference
from
any
library
If
SIGABRT
is
caught
nor
nored
current
directory
is
core
dump
may
be
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Interface
Standard
labsý
llabs
return
absolute
value
integer
int
long
long
long
long
function
returns
absolute
value
int
operand
function
returns
absolute
value
long
operand
function
returns
absolute
value
long
long
operand
In
representation
absolute
value
largest
magnitude
negative
integral
value
is
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Interface
Standard
accept
reject
accept
reject
print
requests
accept
reject
accept
allows
queueing
print
requests
named
destinations
reject
prevents
queueing
print
requests
named
destinations
Use
lpstat
to
check
destinations
are
accepting
rejecting
print
accept
reject
are
run
print
server
to
control
local
print
queues
Under
some
configurations
cept
reject
are
run
client
systems
when
IPP
is
being
used
to
communicate
between
client
server
following
options
are
supported
reason
Assigns
reason
rejection
print
requests
destination
reason
is
reported
by
lpstat
By
default
reason
is
unknown
reason
existing
destinations
new
printer
destinations
added
to
system
not
yet
accepting
Enclose
reason
quotes
contains
blanks
following
operands
are
destination
name
destination
accepting
rejecting
print
Destination
specifies
name
printer
class
printers
Specify
destination
using
atomic
name
names
See
information
regarding
naming
conventions
destinations
following
exit
values
are
Successful
error
System
printer
configuration
database
printer
database
LDAP
version
NIS
version
version
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
See
NOTES
Interface
StabilityObsolete
accept
reject
affect
only
queueing
print
spooling
system
Requests
made
from
client
system
main
queued
client
queueing
mechanism
until
are
cancelled
accepted
by
print
spooling
system
accept
is
except
destination
nameý
When
IPP
is
user
is
prompted
passphrase
remote
print
service
is
configured
to
require
accept
accept
connection
socket
cc
flag
file
library
int
struct
sockaddr
argument
is
socket
has
been
created
with
bound
to
address
with
is
listening
connections
after
call
to
function
tracts
first
connection
queue
pending
connections
creates
new
socket
with
properties
locates
new
file
socket
If
no
pending
connections
are
present
queue
socket
is
not
marked
as
blocks
caller
until
connection
is
present
If
socket
is
marked
as
blocking
no
pending
connections
are
present
queue
returns
error
as
described
below
function
uses
file
to
determine
STREAMS
device
file
name
associated
with
This
is
device
connect
indication
will
be
accepted
socket
is
used
to
read
write
data
to
from
socket
connected
to
It
is
not
used
to
accept
more
connections
original
socket
mains
open
accepting
further
connections
argument
addr
is
result
parameter
is
filled
with
address
connecting
entity
as
is
known
to
communications
layer
exact
format
addr
parameter
is
determined
by
domain
cation
occurs
argument
addrlen
is
contains
amount
space
pointed
to
by
addrý
turn
contains
length
bytes
address
function
is
used
with
socket
types
currently
with
It
is
possible
to
socket
purpose
by
selecting
polling
readý
However
will
only
indicate
when
connect
indication
is
pending
is
still
necessary
to
call
function
returns
error
If
returns
integer
is
descriptor
accepted
socket
will
fail
EBADF
descriptor
is
invalid
ECONNABORTED
remote
side
aborted
connection
before
operation
EFAULT
addr
parameter
addrlen
parameter
is
invalid
EINTR
attempt
was
interrupted
by
delivery
signal
EMFILE
descriptor
table
is
fullý
ENODEV
protocol
family
type
corresponding
to
could
not
be
found
netconfig
fileý
ENOMEM
There
was
insufficient
user
memory
available
to
complete
ENOSR
There
were
insufficient
STREAMS
resources
available
to
complete
ENOTSOCK
descriptor
does
not
reference
socket
EOPNOTSUPP
referenced
socket
is
not
type
EPROTO
protocol
error
has
example
STREAMS
protocol
stack
has
not
been
initialized
connection
has
already
been
EWOULDBLOCK
socket
is
marked
as
no
connections
are
present
to
be
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
accept
accept
new
connection
socket
cc
flag
file
library
int
socket
struct
sockaddr
address
function
extracts
first
connection
queue
pending
connections
creates
new
socket
with
same
socket
type
protocol
address
family
as
specified
socket
allocates
new
file
descriptor
socket
function
takes
following
socket
Specifies
socket
was
created
with
has
been
bound
to
address
with
has
issued
successful
call
to
address
Either
null
pointer
pointer
to
sockaddr
structure
where
address
connecting
socket
will
be
Points
to
input
specifies
length
supplied
sockaddr
output
specifies
length
stored
address
If
address
is
not
null
pointer
address
peer
accepted
connection
is
stored
sockaddr
ture
pointed
to
by
address
length
address
is
stored
object
pointed
to
by
If
actual
length
address
is
greater
than
length
supplied
sockaddr
stored
address
will
be
If
protocol
permits
connections
by
unbound
clients
peer
is
not
bound
then
value
stored
object
pointed
to
by
address
is
unspecified
If
listen
queue
is
empty
connection
requests
is
not
set
file
descriptor
will
block
until
connection
is
present
If
queue
is
empty
connection
requests
is
set
file
descriptor
socket
will
fail
set
errno
to
EAGAIN
EWOULDBLOCK
accepted
socket
cannot
itself
accept
more
connections
original
socket
remains
open
can
accept
more
connections
When
connection
is
will
indicate
file
descriptor
socket
is
ready
reading
Upon
successful
returns
nonnegative
file
descriptor
accepted
socket
is
returned
errno
is
set
to
indicate
error
function
will
fail
EAGAIN
EWOULDBLOCK
is
set
socket
file
descriptor
no
connections
are
present
to
be
cepted
EBADF
socket
argument
is
not
valid
file
ECONNABORTED
connection
has
been
aborted
EFAULT
address
parameter
can
not
be
accessed
written
EINTR
function
was
interrupted
by
signal
was
caught
before
valid
connection
arrived
EINVAL
socket
is
not
accepting
connections
EMFILE
file
descriptors
are
currently
open
calling
process
ENFILE
maximum
number
file
descriptors
system
are
already
opený
ENOTSOCK
socket
argument
does
not
refer
to
socket
EOPNOTSUPP
socket
type
specified
socket
does
not
support
accepting
connections
function
may
fail
ENOBUFS
No
buffer
space
is
ENOMEM
There
was
insufficient
memory
available
to
complete
ENOSR
There
was
insufficient
STREAMS
resources
available
to
complete
EPROTO
protocol
error
has
example
STREAMS
protocol
stack
has
not
been
initialized
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Interface
Standard
access
faccessat
determine
accessibility
file
int
char
int
int
const
char
int
amode
int
function
checks
file
named
by
pathname
pointed
to
by
path
argument
accessibility
cording
to
bit
pattern
contained
amode
using
real
user
ID
place
effective
user
ID
real
group
ID
place
effective
group
This
allows
setuid
process
to
verify
user
running
would
have
had
permission
to
access
fileý
value
amode
is
bitwise
inclusive
OR
access
permissions
to
be
checked
existence
testý
These
constants
are
defined
as
Test
read
Test
write
Test
execute
search
Check
existence
file
See
additional
information
about
Access
If
any
access
permissions
are
to
be
checked
each
will
be
checked
individually
as
described
If
process
has
appropriate
implementation
may
indicate
success
even
none
execute
file
permission
bits
are
function
is
equivalent
to
except
case
where
path
specifies
relative
pathý
In
case
file
whose
accessibility
is
to
be
determined
is
located
relative
to
directory
associated
with
file
descriptor
fd
instead
current
working
If
is
passed
fd
parameter
special
value
defined
current
working
directory
is
used
behavior
is
identical
to
call
to
Values
flag
are
constructed
by
OR
flags
from
following
listý
defined
checks
accessibility
are
performed
using
effective
user
group
IDs
instead
real
user
group
ID
as
required
call
to
If
requested
access
is
return
is
returned
rno
is
set
to
indicate
error
functions
will
fail
EACCES
Permission
bits
file
mode
do
not
permit
requested
access
search
permission
is
denied
component
path
prefix
EFAULT
path
argument
points
to
illegal
address
EINTR
signal
was
caught
during
ELOOP
Too
many
symbolic
links
were
encountered
resolving
pathý
loop
exists
symbolic
links
encountered
during
resolution
path
ENAMETOOLONG
length
path
argument
exceeds
pathname
component
is
longer
than
while
is
effect
ENOENT
component
path
does
not
name
existing
file
path
is
empty
string
ENOLINK
path
argument
points
to
remote
machine
link
to
machine
is
no
longer
active
ENOTDIR
component
path
prefix
is
not
ENXIO
path
argument
points
to
character
block
device
special
file
corresponding
device
has
been
retired
by
fault
management
EROFS
Write
access
is
requested
file
file
system
function
will
fail
EBADF
path
argument
does
not
specify
absolute
path
fd
argument
is
nor
valid
file
descriptor
open
reading
functions
may
fail
EINVAL
value
amode
argument
is
invalid
ENAMETOOLONG
Pathname
resolution
symbolic
link
produced
intermediate
result
whose
length
exceeds
ETXTBSY
Write
access
is
requested
pure
procedure
file
is
being
function
may
fail
EINVAL
value
flag
argument
is
not
valid
ENOTDIR
path
argument
is
not
absolute
path
fd
is
nor
file
descriptor
associated
with
Additional
values
amode
other
than
set
defined
description
might
be
valid
example
system
has
extended
access
purpose
function
is
to
enable
checking
accessibility
files
directories
other
than
current
working
directory
without
exposure
to
race
Any
part
path
file
could
be
changed
parallel
to
call
to
resulting
unspecified
By
opening
file
descriptor
target
directory
using
can
be
guaranteed
file
tested
accessibility
is
located
relative
to
desired
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Interface
Committed
StandardSee
below
For
see
acctý
accton
overview
accounting
miscellaneous
counting
commands
reason
filename
Accounting
software
is
structured
as
set
tools
both
programs
shell
can
be
used
to
build
accounting
systems
describes
set
shell
procedures
built
top
Connect
time
accounting
is
handled
by
various
programs
write
records
into
as
described
programs
described
convert
file
into
session
charging
records
are
then
summarized
by
Process
accounting
is
performed
by
system
kernel
Upon
termination
process
one
record
per
process
is
ten
to
file
programs
summarize
data
charging
is
used
to
summarize
command
usage
Current
process
data
may
be
examined
using
Process
accounting
records
connect
time
accounting
records
any
accounting
records
tacct
format
scribed
can
be
merged
summarized
into
total
accounting
records
by
acctmerg
tacct
format
prtacct
is
used
to
format
any
all
accounting
records
acctdisk
reads
lines
contain
user
login
nameý
number
disk
blocks
converts
to
total
ing
records
can
be
merged
with
other
accounting
records
acctdisk
returns
error
input
file
is
corrupt
improperly
acctdusg
reads
standard
input
from
find
computes
disk
resource
consumption
indirect
by
login
accton
without
arguments
turns
process
accounting
If
filename
is
given
must
be
name
existing
fileý
to
kernel
appends
process
accounting
records
acctwtmp
writes
record
to
record
contains
current
time
string
characters
describe
reason
record
type
ACCOUNTING
is
assigned
reason
must
be
string
fewer
numbers
spaces
For
example
following
are
suggestions
use
reboot
shutdown
acctwtmp
acctwtmp
For
each
user
currently
logged
closewtmp
puts
false
record
fileý
runacct
uses
false
record
connect
accounting
procedures
can
track
time
used
by
users
logged
before
runacct
was
invoked
For
each
user
currently
logged
runacct
uses
to
create
entry
file
created
by
runacct
Entries
enable
subsequent
invocations
runacct
to
account
connect
times
users
currently
logged
following
options
are
filename
Places
filename
records
consisting
filenames
acctdusg
charges
no
one
potential
source
finding
users
trying
to
avoid
disk
filename
Specifies
password
fileý
This
option
is
not
needed
password
file
is
If
any
variables
are
not
set
environment
operational
behavior
acct
each
sponding
locale
category
is
determined
by
value
LANG
environment
If
is
tents
are
used
to
override
both
LANG
other
If
none
above
variables
are
set
environment
locale
determines
how
acct
behaves
Determines
how
acct
handles
When
is
set
to
valid
value
acct
can
display
handle
text
filenames
containing
valid
characters
locale
acct
can
display
handle
Extended
Unix
Code
characters
where
any
character
can
be
bytes
wideý
acct
can
also
handle
EUC
characters
more
column
widths
In
locale
only
characters
from
ISO
are
valid
Determines
how
acct
handles
date
time
formats
In
locale
date
time
handling
follows
rules
Used
login
name
to
user
ID
conversions
Holds
all
accounting
commands
listed
manual
Current
process
accounting
fileý
History
user
access
administration
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
SUNWaccu
acct
enable
disable
process
accounting
int
char
function
enables
disables
system
process
accounting
routine
If
routine
is
enabled
ing
record
will
be
written
accounting
file
each
process
termination
process
can
be
caused
by
call
effective
user
ID
process
calling
must
have
propriate
path
argument
points
to
pathname
accounting
fileý
whose
file
format
is
described
manual
pageý
accounting
routine
is
enabled
path
is
no
errors
occur
during
It
is
disabled
path
is
no
errors
occur
during
Upon
successful
is
is
returned
errno
is
set
to
indicate
error
function
will
fail
EACCES
file
named
by
path
is
not
ordinary
fileý
EBUSY
attempt
is
being
made
to
enable
accounting
using
same
file
is
currently
being
usedý
EFAULT
path
argument
points
to
illegal
address
ELOOP
Too
many
symbolic
links
were
encountered
translating
pathý
ENAMETOOLONG
length
path
argument
exceeds
length
path
argument
exceeds
while
is
effect
ENOENT
One
more
components
accounting
file
pathname
do
not
exist
ENOTDIR
component
path
prefix
is
not
EPERM
privilege
is
not
asserted
effective
set
calling
process
EROFS
named
file
resides
file
system
acctadm
configure
extended
accounting
facility
process
flow
acctadm
configures
various
attributes
extended
accounting
Without
acctadm
displays
current
status
extended
accounting
following
options
are
Disable
reporting
resource
usage
Specify
as
list
resources
source
groups
This
option
requires
operand
See
Disable
accounting
given
operand
type
without
closing
accounting
fileý
This
option
can
be
used
to
rarily
stop
writing
accounting
records
to
accounting
file
without
closing
To
close
file
use
option
See
Enable
reporting
resource
usage
Specify
as
list
resources
source
groups
This
option
requires
operand
See
Enable
accounting
given
operand
type
without
sending
accounting
output
to
fileý
This
option
requires
operand
See
filename
Send
accounting
output
given
operand
type
to
If
filename
exists
contents
must
be
en
accounting
typeý
This
option
requires
operand
See
Display
available
resource
groups
When
option
is
used
with
operand
displays
resource
groups
available
given
accounting
typeý
When
no
operand
is
option
displays
resource
groups
all
available
accounting
types
See
Start
method
This
option
is
used
to
restore
extended
accounting
configuration
bootý
Deactivate
accounting
given
operand
typeý
This
option
also
closes
accounting
file
given
accounting
type
is
currently
opený
This
option
requires
operand
See
options
require
operand
following
operands
are
process
Run
acctadm
process
accounting
components
extended
accounting
task
Run
acctadm
task
accounting
components
extended
accounting
flow
Run
acctadm
IPQoS
accounting
components
extended
accounting
net
Run
acctadm
links
flows
administered
by
respectively
Basic
network
counting
relates
only
to
links
while
extended
network
accounting
includes
both
link
flow
optional
final
parameter
to
acctadm
represents
whether
command
should
act
process
system
taský
IPQoS
network
accounting
components
extended
accounting
Example
Displaying
Current
Status
following
command
displays
current
status
In
example
system
task
accounting
is
active
tracking
only
CPU
Process
flow
accounting
are
not
active
acctadm
Task
active
Task
accounting
Tracked
task
extended
Untracked
task
host
Process
inactive
Process
accounting
none
Tracked
process
none
Untracked
process
Flow
inactive
Flow
accounting
none
Tracked
flow
none
Untracked
flow
extended
Net
inactive
Net
accounting
none
Tracked
Net
none
Untracked
Net
extended
Example
Activating
Basic
Process
Accounting
following
command
activates
basic
process
acctadm
basic
process
Example
Displaying
Available
Resource
Groups
following
command
displays
available
resource
acctadm
extended
basic
extended
basic
extended
basic
extended
basic
oerrpkts
In
output
above
lines
beginning
with
extended
are
shown
with
backslash
In
actual
acctadm
lines
are
displayed
as
long
lines
Example
Displaying
Resource
Groups
Task
Accounting
following
command
displays
resource
groups
task
acctadm
task
extended
basic
following
exit
values
are
Successful
modifications
to
current
configuration
were
valid
made
successfully
error
fatal
error
occured
obtaining
modifying
accounting
configuration
Invalid
command
line
options
were
fatal
error
occurred
during
start
service
fatal
configuration
error
occurred
during
start
service
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Wcsu
Interface
StabilityCommitted
Both
extended
accounting
regular
accounting
can
be
active
Available
resources
can
vary
from
system
to
system
from
platform
to
Extended
accounting
configuration
is
stored
service
management
facility
tion
is
restored
boot
by
transient
service
one
per
accounting
Flow
accounting
Process
accounting
Task
accounting
Network
accounting
instances
are
enabled
disabled
by
acctadm
as
needed
Configuration
changes
are
made
using
acctadm
vice
properties
should
not
be
modified
directly
using
Users
can
manage
extended
accounting
stop
change
accounting
configuration
have
appropriate
RBAC
Rights
profile
accounting
type
to
be
Extended
ing
Flow
Management
Extended
Accounting
Process
Management
Extended
Accounting
Task
Management
tended
Accounting
Network
Management
preceding
profiles
are
respectively
flow
process
task
network
acctcms
command
summary
from
process
accounting
records
acctcms
reads
one
more
normally
form
described
It
adds
all
records
cesses
executed
identically
named
sorts
themý
writes
to
standard
output
normally
ing
internal
summary
format
Print
output
ASCII
rather
than
internal
summary
format
output
includes
command
nameý
number
times
total
total
CPU
minutes
total
real
minutes
mean
size
mean
CPU
minutes
per
characters
transferred
blocks
read
written
as
Output
is
ly
sorted
by
total
Use
following
options
only
with
Output
command
summary
Output
command
summary
When
are
used
combination
report
is
All
output
summaries
are
total
usage
except
number
times
CPU
minutes
real
minutes
are
split
into
prime
Sort
by
total
CPU
timeý
rather
than
total
Combine
all
commands
invoked
only
once
under
Sort
by
number
command
invocations
Any
file
names
encountered
hereafter
are
already
internal
summary
format
Process
all
records
as
total
accounting
records
default
internal
summary
format
splits
each
field
into
prime
parts
This
option
combines
prime
time
parts
into
single
field
is
tal
bothý
provides
upward
compatibility
with
old
style
acctcms
internal
summary
format
records
Example
Using
acctcms
command
typical
sequence
performing
daily
command
accounting
maintaining
running
total
acctcms
filename
today
cp
total
previoustotal
acctcms
today
previoustotal
total
acctcms
today
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
SUNWaccu
Unpredictable
output
results
is
used
new
style
internal
summary
format
files
is
not
used
with
old
style
internal
summary
format
files
files
acctcom
search
print
process
accounting
files
acctcom
acctcom
utility
reads
standard
input
form
described
by
writes
selected
records
to
standard
output
Each
record
represents
execution
one
process
output
shows
COMMAND
NAMEý
USERý
TTYNAME
START
TIMEý
END
TIMEý
REAL
CPU
MEAN
SIZE
without
STAT
system
exit
HOG
FACTOR
KCORE
CPU
FACTOR
CHARS
TRNSFD
BLOCKS
READ
blocks
read
is
prepended
to
command
name
command
was
executed
with
If
process
is
not
associated
with
known
is
printed
TTYNAME
field
If
no
filename
is
standard
input
is
associated
with
terminal
is
case
when
using
is
readý
standard
input
is
readý
If
any
filename
arguments
are
given
are
read
respective
order
Each
file
is
normally
read
forward
chronological
order
by
process
completion
timeý
file
is
usually
current
file
to
be
inedý
busy
system
may
need
several
such
files
all
current
file
are
found
following
options
are
Show
some
average
statistics
about
processes
statistics
will
be
printed
after
output
records
Read
showing
latest
commands
first
This
option
has
no
effect
when
standard
input
is
readý
Print
flag
system
exit
status
columns
output
numeric
output
option
will
be
octal
Instead
mean
memory
sizeý
show
fraction
total
available
CPU
time
consumed
by
process
during
This
is
computed
as
CPU
Print
columns
containing
counts
output
Instead
memory
sizeý
show
total
Show
mean
core
size
Do
not
print
any
output
records
just
print
average
statistics
as
with
option
Show
CPU
factor
Show
separate
system
user
CPU
times
Exclude
column
headings
from
output
sec
Show
only
processes
with
total
CPU
time
exceeding
sec
seconds
time
Select
processes
existing
before
timeý
time
Select
processes
ending
before
timeý
Using
same
time
both
shows
processes
existed
timeý
group
Show
only
processes
belonging
to
group
group
may
be
designated
by
group
ID
group
nameý
factor
Show
only
processes
exceed
factor
where
factor
is
as
explained
option
above
chars
Show
only
processes
transferring
more
characters
than
cutoff
number
given
by
chars
line
Show
only
processes
belonging
to
terminal
pattern
Show
only
commands
matching
pattern
may
be
regular
expression
as
except
means
one
more
occurrences
Copy
selected
process
records
input
data
format
to
suppress
printing
to
standard
sec
Show
only
processes
with
CPU
system
time
exceeding
sec
seconds
time
Select
processes
existing
after
timeý
given
format
time
Select
processes
starting
after
timeý
user
Show
only
processes
belonging
to
userý
user
may
be
specified
by
user
login
name
is
then
converted
to
user
designates
only
processes
executed
with
superuser
designates
only
processes
associated
with
unknown
user
system
group
file
system
password
file
active
processes
accounting
file
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
SUNWaccu
CSIEnabled
System
Administration
Basic
Administration
acctcom
reports
only
processes
have
use
active
acctcon
accounting
acctcon
converts
sequence
records
to
total
accounting
records
tacct
format
records
are
read
from
standard
input
file
is
usually
source
records
however
might
contain
corrupted
records
system
date
changes
should
first
be
fixed
using
wtmpfix
fixed
version
file
can
then
be
redirected
to
acctcon
tacct
records
are
written
to
standard
output
acctcon
is
combination
programs
converts
records
taken
from
fixed
fileý
to
ASCII
output
reads
ASCII
records
produced
by
converts
to
tacct
records
can
be
used
with
options
described
below
as
well
as
with
options
Print
input
onlyý
showing
line
nameý
login
nameý
time
both
numeric
maintains
list
lines
users
are
logged
When
reaches
end
input
emits
sion
record
each
line
still
appears
to
be
active
It
normally
assumes
input
is
current
fileý
es
current
time
as
ending
time
each
session
still
flag
causes
to
instead
last
time
found
input
thus
assuring
reasonable
repeatable
numbers
files
lineuse
lineuse
is
created
to
contain
summary
line
usage
showing
line
nameý
number
minutes
usedý
age
total
elapsed
time
usedý
number
sessions
charged
number
logins
number
logoffs
This
file
helps
track
line
usage
identify
bad
lines
find
software
hardware
Hangup
termination
termination
login
shell
each
generate
logoff
records
number
logoffs
is
often
three
to
four
times
number
See
reboot
reboot
is
filled
with
overall
record
accounting
period
giving
starting
timeý
ending
timeý
number
reboots
number
date
changes
Example
Using
acctcon
command
acctcon
command
is
typically
used
as
acctcon
lineuse
reboots
tmpwtmp
ctacct
commands
are
typically
used
as
lineuse
reboots
tmpwtmp
sort
ctmp
ctmp
ctacct
History
user
access
administration
information
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
SUNWaccu
line
usage
report
is
confused
by
date
changes
Use
wtmpfix
with
file
as
to
correct
During
single
invocation
any
given
command
acctcon
commands
can
process
maximum
distinct
session
distinct
terminal
lines
distinct
login
names
If
some
point
actual
number
any
one
items
exceeds
maximum
command
will
not
succeed
succeed
acct
accounting
file
format
Files
produced
as
result
calling
have
records
form
defined
by
whose
contents
typedef
pseudo
representation
bit
exponent
high
order
bitsý
fraction
low
order
bitsý
struct
acct
char
Accounting
flag
char
Exit
status
Accounting
user
ID
Accounting
group
ID
control
tty
Beginning
time
accounting
user
time
clock
ticks
accounting
system
time
clock
ticks
accounting
total
elapsed
time
clock
ticks
memory
usage
clicks
chars
transferred
by
number
block
char
command
name
Accounting
Flags
AFORK
has
executed
forký
no
exec
ASU
used
privileges
ACCTF
record
type
AEXPND
Expanded
Record
Type
default
In
AFORK
flag
is
turned
by
each
fork
turned
off
by
execý
field
is
inherited
from
parent
process
is
reset
by
any
execý
Each
time
system
charges
process
with
clock
tický
also
adds
to
current
process
sizeý
computed
as
processes
using
value
can
be
viewed
as
approximation
to
mean
process
sizeý
as
ified
by
text
sharing
structure
tacct
resides
with
source
files
accounting
represents
summary
counting
statistics
user
id
This
structure
is
used
by
accounting
commands
to
report
statistics
based
user
total
accounting
acct
also
day
struct
tacct
user
id
char
login
name
float
cpu
time
minutes
float
float
connect
time
minutes
float
disk
usage
long
count
processes
unsigned
short
count
login
sessions
unsigned
short
count
disk
samples
unsigned
short
fee
special
services
members
contain
usage
information
pertaining
to
prime
time
time
hours
first
element
each
array
represents
time
resource
was
used
during
prime
time
hours
ond
element
each
array
represents
time
resource
was
used
during
time
hours
Prime
time
time
hours
may
be
set
holidays
file
member
is
cumulative
measure
amount
memory
used
over
accounting
period
by
cesses
owned
by
user
with
uid
amount
shown
represents
kilobyte
segments
memory
usedý
per
minute
member
represents
amount
time
user
was
logged
to
system
time
table
value
command
gives
little
information
about
actual
size
command
may
be
incremented
while
different
command
example
is
being
executed
by
process
process
acctmerg
merge
add
total
accounting
files
acctmerg
reads
standard
input
up
to
nine
additional
files
all
tacct
format
ASCII
version
thereof
It
merges
inputs
by
adding
records
whose
keys
user
ID
are
expects
inputs
to
be
sorted
keysý
Produce
output
ASCII
version
tacct
Produce
input
ASCII
version
tacct
Print
input
with
no
Produce
single
record
totals
all
input
Summarize
by
user
rather
than
by
user
ID
nameý
Produce
output
verbose
ASCII
format
with
more
precise
notation
numbers
Example
Using
acctmerg
command
following
sequence
is
useful
making
to
any
file
kept
acctmerg
Edit
as
acctmerg
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
SUNWaccu
acctprc
process
accounting
acctprc
reads
standard
input
converts
to
total
accounting
records
tacct
record
acctprc
divides
CPU
time
into
prime
time
time
determines
mean
memory
size
memory
ment
acctprc
then
summarizes
tacct
records
according
to
user
adds
login
names
corresponding
to
user
summarized
records
are
then
written
to
standard
output
reads
input
form
scribed
by
adds
login
names
corresponding
to
user
then
writes
each
process
ASCII
line
giving
user
login
nameý
prime
CPU
time
CPU
time
mean
memory
size
memory
segment
If
ctmp
is
given
should
contain
list
login
sessions
sorted
by
user
ID
login
nameý
If
file
is
not
obtains
login
names
from
password
fileý
just
as
acctprc
doesý
information
ctmp
helps
distinguish
between
different
login
names
share
same
user
From
standard
input
reads
records
form
written
by
summarizes
according
to
er
ID
nameý
then
writes
sorted
summaries
to
standard
output
as
total
accounting
records
Example
amples
acctprc
acctprc
command
is
typically
used
as
shown
acctprc
ptacct
commands
are
typically
used
as
shown
ctmp
ptacct
system
password
file
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
SUNWaccu
Although
is
possible
to
distinguish
among
login
names
share
user
IDs
commands
run
from
command
lineý
is
difficult
to
make
distinction
commands
invoked
other
waysý
command
run
from
is
example
where
might
have
more
precise
conversion
can
be
done
using
acctwtmp
program
acctprc
does
not
distinguish
between
users
with
identical
user
memory
segment
mean
memory
size
is
unit
measure
number
bytes
logical
memory
ment
particular
During
single
invocation
any
given
command
acctprc
commands
can
process
maximum
distinct
sessions
distinct
terminal
lines
distinct
login
names
If
some
point
actual
number
any
one
items
exceeds
maximum
command
will
not
succeed
succeed
acctsh
ckpacct
dodisk
monacct
nulladm
prctmp
prdaily
prtacct
startup
turnacct
shell
procedures
accounting
number
number
filename
filename
heading
reason
off
switch
chargefee
can
be
invoked
to
charge
number
units
to
record
is
written
to
to
be
merged
with
other
accounting
records
by
ckpacct
should
be
initiated
using
to
periodically
check
size
If
size
exceeds
blocks
by
default
turnacct
will
be
invoked
with
argument
switch
To
avoid
conflict
with
turnacct
switch
ecution
runacct
do
not
run
ckpacct
runacct
simultaneously
If
number
free
disk
blocks
file
system
falls
below
ckpacct
will
automatically
turn
off
collection
process
accounting
records
via
off
argument
to
When
least
blocks
are
accounting
will
be
activated
again
next
vocation
ckpacct
This
feature
is
sensitive
to
frequency
ckpacct
is
usually
by
command
dodisk
should
be
invoked
by
to
perform
disk
accounting
lastlogin
is
invoked
by
to
update
shows
last
date
each
person
logged
monacct
should
be
invoked
once
each
month
each
accounting
period
number
indicates
month
period
If
number
is
not
given
defaults
to
current
month
This
default
is
useful
monacct
is
to
executed
using
first
day
each
month
monacct
creates
summary
files
restarts
summary
files
nulladm
creates
filename
with
mode
ensures
owner
group
are
It
is
called
by
various
ing
shell
prctmp
can
be
used
to
print
session
record
file
created
by
prdaily
is
invoked
by
to
format
report
previous
accounting
dataý
report
resides
where
mmdd
is
month
day
report
current
daily
accounting
ports
may
be
printed
by
typing
prdaily
Previous
accounting
reports
can
be
printed
by
using
mmdd
option
specifying
exact
report
date
desired
prtacct
can
be
used
to
format
print
any
total
accounting
shutacct
is
invoked
during
system
shutdown
to
turn
process
accounting
off
append
reason
record
to
startup
can
be
invoked
when
system
is
brought
to
state
to
turn
process
accounting
turnacct
is
interface
to
accton
to
turn
process
accounting
switch
argument
moves
current
to
next
free
name
incr
is
number
starting
with
incrementing
by
one
each
additional
pacct
then
turns
accounting
back
again
This
procedure
is
called
by
ckpacct
thus
can
be
taken
care
by
command
used
to
keep
pacct
to
reasonable
sizeý
shutacct
uses
turnacct
to
stop
process
startup
uses
turnacct
to
start
process
following
options
are
This
option
prints
report
exceptional
resource
usage
by
command
may
be
used
current
ing
data
onlyý
This
option
prints
report
exceptional
usage
by
login
id
specified
dateý
Previous
daily
reports
are
cleaned
up
therefore
inaccessible
after
each
invocation
monacct
This
option
uses
acctdusg
to
do
slower
version
disk
accounting
by
login
filenames
specifies
one
more
filesystem
names
where
disk
accounting
will
be
doneý
If
filenames
are
usedý
disk
ing
will
be
done
filesystems
onlyý
If
option
is
usedý
filenames
should
be
mount
points
mounted
filesystems
If
option
is
omitted
filenames
should
be
special
file
names
mountable
filesystems
Configuration
file
command
Holds
all
accounting
commands
listed
section
manual
Contains
limits
exceptional
usage
by
command
name
Contains
limits
exceptional
usage
by
login
ID
Fiscal
reports
directory
Working
directory
Summary
directory
contains
information
monacct
File
updated
by
last
login
Accumulator
fees
Current
file
accounting
Used
pacct
gets
large
during
execution
daily
accounting
procedure
History
user
access
administration
information
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
SUNWaccu
See
main
daily
accounting
shell
script
performs
accumulation
connect
process
disk
accounting
daily
basis
It
also
creates
summaries
command
usage
usage
facl
get
set
Access
Control
List
int
int
int
void
int
fildes
int
int
void
functions
get
set
ACL
file
whose
name
is
given
by
pathp
referenced
by
open
file
descriptor
fildes
nentries
argument
specifies
how
many
ACL
entries
fit
into
buffer
aclbufp
tion
is
used
to
manipulate
ACL
file
system
objects
following
types
are
supported
Used
by
UFS
file
system
Used
by
ZFS
file
systems
following
values
cmd
are
SETACL
nentries
ACL
entries
specified
buffer
aclbufp
are
stored
All
directories
path
name
must
be
GETACL
Buffer
aclbufp
is
filled
with
ACL
entries
Read
access
to
file
is
not
all
directories
path
name
must
be
GETACLCNT
number
entries
ACL
is
Read
access
to
file
is
not
all
directories
path
name
must
be
nentries
ACL
entries
specified
buffer
aclbufp
are
stored
All
directories
path
name
must
be
Write
ACL
access
is
required
to
change
Buffer
aclbufp
is
filled
with
ACL
entries
Read
access
to
file
is
required
all
directories
path
name
must
be
number
entries
ACL
is
Read
access
to
file
is
required
all
directories
path
name
must
be
Upon
successful
return
cmd
is
SETACL
If
cmd
is
GETACL
number
ACL
entries
is
is
returned
errno
is
set
to
indicate
error
function
will
fail
EACCES
caller
does
not
have
access
to
component
EFAULT
pathp
aclbufp
argument
points
to
illegal
address
EINVAL
cmd
argument
is
not
GETACL
SETACL
cmd
argument
is
SETACL
nentries
is
less
than
cmd
argument
is
SETACL
CL
ACL
specified
aclbufp
is
not
valid
EIO
disk
error
has
occurred
while
storing
retrieving
ENOENT
component
path
does
not
exist
ENOSPC
cmd
argument
is
GETACL
nentries
is
less
than
number
entries
cmd
argument
is
SETACL
there
is
insufficient
space
file
system
to
store
ENOSYS
cmd
argument
is
SETACL
file
specified
by
pathp
resides
file
system
does
not
support
ACLsý
function
is
not
supported
by
implementation
ENOTDIR
component
path
specified
by
pathp
is
not
cmd
argument
is
SETACL
attempt
is
made
to
set
default
ACL
file
type
other
than
ENOTSUP
cmd
argument
is
GETACL
ACL
is
composed
entries
ACL
cannot
be
translated
into
formý
cmd
argument
is
underlying
filesystem
only
supports
ACLs
composed
tries
ACL
could
not
be
translated
into
formý
EPERM
effective
user
ID
does
not
match
owner
file
process
does
not
have
appropriate
legeý
EROFS
cmd
argument
is
SETACL
file
specified
by
pathp
resides
file
system
is
mounted
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Interface
tyEvolving
acl
Access
Control
Lists
Access
control
lists
are
discretionary
access
control
mechanisms
grant
deny
access
to
files
Two
different
ACL
models
are
supported
Solaris
ACLs
ACLsý
older
model
is
supported
by
UFS
file
system
This
model
is
based
withdrawn
ACL
POSIX
specification
was
never
standardized
It
was
subsequently
withdrawn
by
POSIX
other
model
is
based
standards
working
group
is
approved
standard
from
net
Engineering
Task
Force
ZFS
file
system
uses
model
provides
richer
semantics
finer
grained
permission
capabilities
than
model
ACLs
provide
alternative
security
mechanism
to
basic
UNIX
file
permissions
Solaris
release
Their
purpose
is
to
further
restrict
access
to
files
directories
to
extend
permissions
to
particular
userý
ACLs
can
be
used
to
change
permissions
standard
owner
group
other
class
bits
modeý
ACLs
can
give
additional
users
groups
access
to
fileý
directory
can
also
have
special
kind
ACL
called
default
defines
ACL
entries
to
be
inherited
by
descendents
ACLs
have
ACL
entry
called
maský
mask
defines
maximum
permissions
can
be
granted
to
additional
user
group
tries
Whenever
file
is
created
mode
is
changed
by
mask
is
It
is
computed
to
be
group
permission
defined
mode
passed
to
ACL
model
uses
standard
rwx
model
traditional
UNIX
permissions
ACL
is
represented
as
Each
contains
one
ACL
entry
ACL
entry
is
represented
by
two
three
fields
If
uid
blank
represents
file
owner
If
gid
is
blank
represents
owning
group
Represents
file
other
class
Defines
MAX
permission
to
hand
For
example
to
give
user
joe
read
write
permissions
ACL
entry
is
specified
ACL
model
is
based
loosely
Windows
NT
ACL
model
ACLs
provide
much
richer
ACL
model
than
ACLsý
major
differences
between
ACLs
are
as
ACLs
provide
finer
grained
permissions
than
rwx
model
ACLs
allow
both
ALLOW
DENY
entries
ACLs
vide
rich
set
inheritance
POSIX
ACLs
also
have
inheritance
with
model
can
trol
following
inheritance
Whether
inheritance
cascades
to
both
files
directories
only
to
files
directories
In
case
directories
can
indicate
whether
inheritance
is
applied
to
directory
itself
to
just
one
level
subdirectories
cascades
to
all
subdirectories
ACLs
provide
mechanism
hooking
into
audit
trail
Solaris
does
not
support
ACLs
enable
adminstrators
to
specify
order
ACL
entries
are
checked
With
ACLs
file
system
orders
ACL
entries
into
well
defined
strict
access
checking
order
ACL
semantics
can
be
achieved
with
ACLsý
However
only
some
ACLs
can
be
ed
to
equivalent
ACLsý
Permissions
can
be
specified
three
different
chmod
ACL
verbose
compact
verbose
format
uses
words
to
indicate
permissions
are
separated
with
forward
slash
Compact
format
uses
permission
letters
positional
format
uses
permission
letters
hypen
to
identify
no
sions
permissions
verbose
mode
abbreviated
form
parentheses
compact
positional
mode
are
described
as
Permission
to
read
data
file
Permission
to
list
contents
Permission
to
modify
data
anywhere
offset
range
This
includes
ability
to
grow
file
write
to
any
arbitrary
offset
Permission
to
add
new
file
to
ability
to
modify
dataý
only
starting
permission
is
not
ported
Permission
to
create
subdirectory
to
ability
to
read
extended
attributes
file
do
lookup
extended
attributes
ability
to
create
extended
attributes
write
to
extended
attributes
execute
Permission
to
execute
fileý
ability
to
read
basic
attributes
fileý
Basic
attributes
are
considered
to
be
stat
level
Allowing
access
mask
bit
means
entity
can
execute
Permission
to
change
times
associated
with
file
directory
to
arbitrary
value
delete
Permission
to
delete
fileý
Permission
to
delete
file
within
Permission
to
read
Permission
to
write
ACL
ability
to
execute
Permission
to
change
owner
ability
to
execute
synchronize
Permission
to
access
file
locally
server
with
synchronous
reads
writes
permission
is
not
following
inheritance
flags
are
supported
by
Inherit
to
all
newly
created
files
Inherit
to
all
newly
created
directories
Placed
does
not
apply
to
directory
itself
only
to
newly
created
created
files
directories
This
flag
requires
to
indicate
what
to
inherit
Placed
directories
indicates
ACL
entries
should
only
be
inherited
one
level
treeý
This
flag
requires
to
indicate
what
to
inherit
Indicates
alarm
audit
record
should
be
initiated
upon
successful
Used
with
ACE
types
Indicates
alarm
audit
record
should
be
initiated
when
access
fails
Used
with
ACE
types
inherited
ACE
was
No
permission
granted
ACL
is
expressed
using
following
File
owner
Group
owner
user
Permissions
specific
user
group
Permissions
specific
group
Permission
inheritance
flags
are
separated
by
ACL
specification
Using
compact
ACL
format
permissions
are
specified
by
using
unique
letters
to
indicate
permissions
Using
positional
ACL
format
permissions
are
specified
as
positional
arguments
similar
to
ls
format
hyphen
indicates
no
permission
is
granted
can
be
omitted
only
required
letters
have
to
be
letters
above
are
listed
order
would
be
specified
positional
With
letters
can
specify
permissions
following
equivalent
waysý
Or
can
remove
scrunch
inheritance
flags
can
also
be
specified
more
compact
manner
as
Solaris
command
interface
supports
manipulation
ACLsý
following
Solaris
utilities
accommodate
both
ACL
chmod
chmod
utility
has
been
enhanced
to
allow
setting
deleting
ACLsý
This
is
achieved
by
tending
argument
to
support
ACL
manipulation
See
details
compress
When
file
is
compressed
any
ACL
associated
with
original
file
is
preserved
with
compressed
fileý
cp
By
default
cp
ignores
ACLsý
unless
option
is
When
is
specified
owner
group
mission
modes
modification
access
times
ACLsý
extended
attributes
applicable
are
cpio
ACLs
are
preserved
when
option
is
find
Find
locates
files
with
ACLs
when
flag
is
ls
By
default
ls
does
not
display
ACL
information
When
option
is
ACL
is
mv
When
file
is
moved
all
attributes
are
carried
along
with
renamed
fileý
When
file
is
moved
across
file
system
ACLs
are
If
ACL
information
cannot
be
move
fails
source
file
is
not
removed
pack
When
file
is
packed
any
ACL
associated
with
original
file
is
preserved
with
packed
fileý
rcp
rcp
has
been
enhanced
to
support
copying
ACL
is
only
preserved
when
remote
host
supports
ACLsý
tar
ACLs
are
preserved
when
option
is
unpack
When
file
with
ACL
is
unpacked
file
retains
ACL
information
primary
interfaces
required
to
access
file
system
ACLs
programmatic
level
are
These
functions
support
both
POSIX
draft
ACLs
ACLsý
int
char
int
flagý
int
int
flagý
functions
retrieves
ACL
file
whose
name
is
given
by
path
enced
by
open
file
descriptor
flag
argument
specifies
whether
trivial
ACL
should
be
When
flag
argument
equals
then
only
ACLs
are
not
trivial
are
ACL
is
turned
aclp
void
function
frees
up
memory
allocated
argument
int
char
int
functions
are
used
setting
ACL
file
whose
name
is
given
by
path
referenced
by
open
file
descriptor
aclp
argument
specifies
ACL
to
lates
ACL
into
ACL
when
target
file
systems
supports
ACLsý
No
translation
is
performed
when
trying
to
set
ACL
ACL
supported
file
system
int
char
function
is
used
to
determine
whether
file
has
trivial
trivialness
ACL
pends
type
ACL
For
ACLsý
implies
ACL
has
greater
than
For
style
ACLsý
implies
ACL
has
entries
other
than
heritance
flags
are
ACL
is
not
ordered
manner
meets
POSIX
access
control
requirements
int
char
function
removes
all
ACLs
from
file
replaces
with
trivial
ACL
based
off
passed
argument
modeý
After
replacing
ACL
owner
group
file
are
set
to
values
specified
uid
gid
int
char
char
int
function
converts
internal
ACL
representation
pointed
to
by
aclp
into
external
representation
See
DESCRIPTION
details
about
external
representation
functions
converts
external
representation
into
internal
representation
See
TION
details
about
external
representation
following
examples
demonstrate
how
API
can
be
used
to
perform
basic
operations
ACLsý
Example
Retrieving
Setting
ACL
Use
following
to
retrieve
ACL
set
another
error
aclp
error
Example
Retrieving
Setting
Any
ACLs
Use
following
to
retrieve
any
including
trivial
ACLsý
set
another
error
error
Example
Determining
File
has
Trivial
ACL
Use
following
to
determine
file
has
trivial
istrivial
has
trivial
else
has
Example
Removing
all
ACLs
from
File
Use
following
to
remove
all
ACLs
from
fileý
set
new
modeý
owner
error
check
validity
ACL
cc
int
int
function
checks
validity
ACL
pointed
to
by
aclpý
isdir
argument
checks
validity
ACL
will
be
applied
to
ACL
can
be
POSIX
draft
ACL
as
supported
by
UFS
ACL
as
supported
by
ZFS
When
function
verifies
POSIX
draft
rules
followed
are
described
For
ACL
is
verified
against
following
inheritance
flags
are
valid
ACL
must
have
least
one
ACL
entry
no
more
than
permission
field
contains
only
supported
entry
type
is
valid
flag
fields
contain
only
valid
flags
as
supported
by
If
any
above
rules
are
function
fails
with
errno
set
to
EINVAL
If
ACL
is
valid
returns
Otherwise
errno
is
set
to
EINVAL
return
value
is
set
to
one
There
are
invalid
inheritance
flags
There
are
invalid
flags
specified
ACL
map
to
supported
flags
ACL
model
ACL
contains
unknown
value
type
field
system
cannot
allocate
any
memory
Inheritance
flags
are
only
allowed
ACLs
directories
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Interface
Committed
aclcheck
check
validity
ACL
cc
int
int
int
function
checks
validity
ACL
pointed
to
by
aclbufp
nentries
argument
is
number
entries
contained
buffer
parameter
returns
index
first
entry
is
invalid
function
verifies
ACL
pointed
to
by
aclbufp
is
valid
according
to
following
There
must
be
exactly
one
ACL
entry
There
must
be
exactly
one
ACL
entry
There
must
be
actly
one
ACL
entry
If
there
are
any
GROUP
ACL
entries
then
group
ID
each
group
ACL
entry
must
be
unique
If
there
are
any
USER
ACL
entries
then
user
ID
each
user
ACL
entry
must
be
unique
If
there
are
any
GROUP
USER
ACL
entries
then
there
must
be
exactly
one
entry
If
there
are
any
default
ACL
entries
then
following
There
must
be
exactly
one
default
ACL
entry
There
must
be
exactly
one
default
ACL
entry
There
must
be
exactly
one
default
ACL
entry
If
there
are
any
entries
then
group
ID
each
ACL
entry
must
be
unique
If
there
are
any
entries
then
user
ID
each
ACL
entry
must
be
unique
If
there
are
any
entries
then
there
must
be
exactly
one
ACL
entry
If
any
above
rules
are
then
function
fails
with
errno
set
to
EINVAL
If
ACL
is
valid
will
return
Otherwise
errno
is
set
to
EINVAL
return
code
is
set
to
one
There
is
more
than
one
ACL
entry
There
is
more
than
one
ACL
entry
There
is
more
than
one
ACL
entry
There
is
more
than
one
ACL
entry
Duplicate
entries
USERý
GROUP
entry
type
is
invalid
Missing
entry
parameter
returns
caseý
system
cannot
allocate
any
memory
parameter
returns
caseý
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Interface
tyEvolving
free
memory
associated
with
structure
cc
void
function
frees
memory
allocated
structure
pointed
to
by
aclp
function
does
not
return
value
See
descriptions
following
ATTRIBUTE
TYPEATTRIBUTE
VALUE
Interface
tyEvolving
Executable
Linking
Format
files
file
name
is
default
output
file
name
from
link
editor
link
editor
will
make
ecutable
there
were
no
errors
linking
output
file
also
follows
format
file
although
default
file
name
is
Programs
manipulate
ELF
files
may
use
library
overview
file
format
lowsý
For
more
complete
information
see
references
given
below
Linking
ViewExecution
View
ELF
headerELF
header
gram
header
tableProgram
header
table
optional
Section
ÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿ
Section
nSegment
ÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿ
ÿÿÿÿÿÿÿÿ
Section
header
tableSection
header
table
optional
ELF
header
resides
beginning
holds
describing
organization
Sections
hold
bulk
object
file
information
linking
instructions
dataý
symbol
table
relocation
information
Segments
hold
object
file
information
program
execution
viewý
As
shown
segment
may
contain
one
more
program
header
table
present
tells
system
how
to
create
process
image
Files
used
to
build
process
age
must
have
program
header
table
relocatable
files
do
not
need
section
header
table
contains
information
describing
Every
section
has
entry
table
each
entry
gives
tion
such
as
section
nameý
section
sizeý
Files
used
during
linking
must
have
section
header
table
other
object
files
may
may
not
have
Although
figure
shows
program
header
table
immediately
after
ELF
header
section
header
table
following
actual
files
may
differ
sections
segments
have
no
specified
order
Only
ELF
header
has
fixed
position
fileý
When
file
is
loaded
into
memory
three
logical
segments
are
set
text
segment
data
segment
data
followed
by
uninitialized
latter
actually
being
initialized
to
all
stack
text
segment
is
not
writable
by
program
other
processes
are
executing
same
fileý
processes
will
share
single
text
segment
data
segment
starts
next
maximal
page
boundary
past
last
text
address
If
system
supports
more
than
one
page
sizeý
is
largest
supported
sizeý
When
process
image
is
created
part
file
holding
end
text
beginning
data
may
appear
twice
duplicated
chunk
text
appears
beginning
data
is
never
is
duplicated
operating
system
may
bring
pieces
file
multiples
actual
page
size
without
having
to
realign
beginning
data
section
to
page
first
data
address
is
sum
next
maximal
page
boundary
past
end
text
plus
der
last
text
address
divided
by
maximal
page
sizeý
If
last
text
address
is
multiple
maximal
page
sizeý
no
duplication
is
stack
is
automatically
extended
as
data
segment
is
extended
as
requested
by
system
callý
ANSI
Guide
Guide
